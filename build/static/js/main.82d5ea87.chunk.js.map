{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","Views/PhoneBook.js","App.js","redux/reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","actionsExport","addNewContact","createAction","name","number","payload","id","shortid","generate","deleteContact","filterContact","ContactForm","state","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","contacts","onSubmit","some","elm","toLowerCase","alert","this","className","style","label","input","type","onChange","button","Component","connect","items","dispatch","filter","target","getVisibleContacts","allContacts","normalFilter","includes","onDeleteContact","list","map","item","onClick","PhoneBook","App","createReducer","contact","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonePersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phoneReducer","devTools","process","storeExport","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.82d5ea87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__1b5R0\",\"item\":\"ContactList_item__2bTB-\",\"list\":\"ContactList_list__1QlQQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2Qxyb\"};","import shortid from 'shortid';\r\n// import { ADD, DELETE, FILTER } from './types';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n// const addNewContact = (name, number) => ({\r\n//   type: ADD,\r\n//   payload: { contacts: { id: shortid.generate(), name: name, number: number } },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: DELETE,\r\n//   payload: { id: contactId },\r\n// });\r\n\r\n// const filterContact = filter => ({\r\n//   type: FILTER,\r\n//   payload: filter,\r\n// });\r\n\r\nconst addNewContact = createAction(\r\n  'contacts/AddNewContact',\r\n  ({ name, number }) => {\r\n    return {\r\n      payload: {\r\n        id: shortid.generate(),\r\n        name,\r\n        number,\r\n      },\r\n    };\r\n  },\r\n);\r\n\r\nconst deleteContact = createAction('contacts/DeleteContact');\r\n\r\nconst filterContact = createAction('contacts/FilterContact');\r\n\r\nconst actionsExport = { addNewContact, deleteContact, filterContact };\r\n\r\nexport default actionsExport;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actionsExport from '../../redux/actions';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { contacts, onSubmit } = this.props;\r\n    if (contacts.some(elm => elm.name.toLowerCase() === name.toLowerCase())) {\r\n      return alert(`${name} is already in contacts`);\r\n    }\r\n    if (\r\n      contacts.some(elm => elm.number.toLowerCase() === number.toLowerCase())\r\n    ) {\r\n      return alert(`${number} is already in contacts`);\r\n    }\r\n    onSubmit(this.state);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    const { handleChange, handleSubmit } = this;\r\n    return (\r\n      <>\r\n        <form className={style.ContactForm} onSubmit={handleSubmit}>\r\n          <label className={style.label}>\r\n            Name\r\n            <input\r\n              className={style.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n          <label className={style.label}>\r\n            Number\r\n            <input\r\n              className={style.input}\r\n              type=\"text\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n          <button className={style.button} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// const mapStateToProps = state => {\r\n//   return { state };\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: ({ name, number }) =>\r\n    dispatch(actionsExport.addNewContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  // name: PropTypes.string.isRequired,\r\n  // number: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actionsExport from '../../redux/actions';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        className={style.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(actionsExport.filterContact(e.target.value)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actionsExport from '../../redux/actions';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul className={style.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={style.item} key={id}>\r\n          {name}: {number}\r\n          <button\r\n            className={style.button}\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onDeleteContact(id);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(actionsExport.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport ContactForm from '../components/ContactForm/ContactForm';\r\nimport Filter from '../components/Filter/Filter';\r\nimport ContactList from '../components/ContactList/ContactList';\r\n// import shortid from 'shortid';\r\nimport { connect } from 'react-redux';\r\n\r\nclass PhoneBook extends Component {\r\n  // state = {\r\n  //   contacts: [\r\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  //   ],\r\n  //   filter: '',\r\n  // };\r\n\r\n  // addNewContact = arr => {\r\n  //   const newName = this.state.contacts\r\n  //     .map(contact => contact.name)\r\n  //     .includes(arr.name);\r\n\r\n  //   if (newName) {\r\n  //     alert(`${arr.name} is already in contacts`);\r\n  //   } else if (arr.name.length === 0) {\r\n  //     alert('Fields must be filled!');\r\n  //   } else {\r\n  //     const contact = {\r\n  //       ...arr,\r\n  //       id: shortid.generate(),\r\n  //     };\r\n\r\n  //     this.setState(prevState => ({\r\n  //       contacts: [...prevState.contacts, contact],\r\n  //     }));\r\n  //   }\r\n  // };\r\n\r\n  // deleteContact = contactId => {\r\n  //   this.setState(prevState => ({\r\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n  //   }));\r\n  // };\r\n\r\n  // changeFilterContacts = e => {\r\n  //   this.setState({ filter: e.currentTarget.value });\r\n  // };\r\n\r\n  // getVisibleContacts = () => {\r\n  //   const { contacts, filter } = this.state;\r\n  //   const normalizedFilter = filter.toLowerCase();\r\n  //   return contacts.filter(contact =>\r\n  //     contact.name.toLowerCase().includes(normalizedFilter),\r\n  //   );\r\n  // };\r\n\r\n  // componentDidMount() {\r\n  //   const contacts = localStorage.getItem('contacts');\r\n  //   const parsedContacts = JSON.parse(contacts);\r\n  //   console.log(parsedContacts);\r\n  //   if (parsedContacts) {\r\n  //     this.setState({ contacts: parsedContacts });\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   if (this.state.contacts !== prevState.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n  // }\r\n  render() {\r\n    // const { filter } = this.state;\r\n    // const visibleContacts = this.getVisibleContacts();\r\n\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        {/* <ContactForm onAddNewContact={this.addNewContact} /> */}\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        {/* <Filter value={filter} onChange={this.changeFilterContacts} /> */}\r\n        <Filter />\r\n        {/* <ContactList\r\n          contacts={visibleContacts}\r\n          onDaleteContact={this.deleteContact}\r\n        /> */}\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, null)(PhoneBook);\r\n","import React, { Component } from 'react';\nimport PhoneBook from '../src/Views/PhoneBook';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PhoneBook />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport actionsExport from './actions';\r\n// import { ADD, DELETE, FILTER } from './types';\r\n\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n// const addNewContact = (state, payload) => {\r\n//   const newName = state.map(\r\n//     contact => contact.name.toLowerCase() === payload.name.toLowerCase(),\r\n//   );\r\n//   if (newName !== undefined) {\r\n//     alert(`${payload.name} is already in contacts`);\r\n//   } else if (payload.name.length === 0) {\r\n//     alert('Fields must be filled!');\r\n//   } else return newName;\r\n// };\r\n\r\n// const items = (state = [], { payload, type }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       return addNewContact(state, payload) ? [state] : [...state, payload];\r\n\r\n//     case DELETE:\r\n//       return state.filter(item => item.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', action) => {\r\n//   switch (action.type) {\r\n//     case FILTER:\r\n//       return action.payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst items = createReducer([], {\r\n  [actionsExport.addNewContact]: (state, { payload }) => [...state, payload],\r\n  [actionsExport.deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actionsExport.filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter });\r\n","// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport phoneReducer from './reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: phoneReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst phonePersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(phonePersistConfig, phoneReducer),\r\n  },\r\n  middleware,\r\n\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst storeExport = { store, persistor };\r\n\r\nexport default storeExport;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './styles.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__xk8dv\",\"label\":\"ContactForm_label__3-rH2\",\"button\":\"ContactForm_button__1kpCE\",\"input\":\"ContactForm_input__1L7f2\"};"],"sourceRoot":""}